/*
  Do the access (very first) phase here. In this phase, the information is gotten from LDAP
  for the capability set and all capabilities are returned (this is a query) along
  with any extras.
*/
block[

    xi. := resolve_templates(at_claims.EPE., scopes., true);  // first pass, get explicitly allowed scopes

     say('*** FNAL xi =' + to_string(xi.));

    // Process the capability set
    cs. := mask(xi., -1 < starts_with(xi., CS_HEAD));

    // Only one capability set at most is allowed.
    if[
         1 < size(cs.)
      ][
                 sys_err.ok := false;
            sys_err.message := 'Multiple ' + CS + ' scopes are unsupported.';
          sys_err.errorType := 'access_denied';
            return([]);
    ];
    if[
        1 == size(cs.)
      ][
       say('*** FNAL got ' + CS + ': ' + input_form(cs.));

         record. :=  script_load('fnal/new/get_service.qdl', script_args(0),script_args(1), (cs.0-CS_HEAD)+'@fnal.gov');
        say('*** FNAL record =' + to_string(record.));
         xi. := mask(xi., xi. != cs.0); // remove capability set from returned scopes.
        say('*** FNAL xi after CS remove =' + to_string(xi.));

         if[
           0 < size(record.)
          ][
             if[is_defined(record.VOPAUID)][claims.vault_uid := record.VOPAUID;];
             if[is_defined(record.EPPN)][access_token.sub := record.EPPN;];
             if[
                is_defined(record.EPE.)
              ][
                 // do any substitutions in the templates.
                 s_rec. := template_substitution(record.EPE., claims.);
                 say('*** FNAL eta. post subst =' + to_string(s_rec.));
                 // Get any specific overrides.
                 eta. := resolve_templates(s_rec., scopes., true);
                 say('*** FNAL eta. =' + to_string(eta.));
                  xi. := xi. ~ eta. ~ s_rec.; // duplicates ok here, removed later
             ]; // no capabilites means do nothing.
         ];

      ];

     say('*** FNAL final xi =' + to_string(xi.));

     access_token.scope := detokenize(unique(xi.), ' ', 2); // turn in to string, omit duplications, trailing space
     say('*** FNAL access token = \'' + access_token.scope + '\'');
];