/*
   A script for WLCG capability set support.
   Based on

   https://github.com/WLCG-AuthZ-WG/common-jwt-profile/blob/2d9aa500c70453d54bbf2b6c389cfc148c995e1e/profile.md#group-or-role-based-capability-selection

   in the WLCG specification.   This returns a list of the capabilites. The spec says that if they request other capabilites
   then just add these.
*/

say('*** WLCG_CS debug script arg count = ' + to_string(script_args()));
say('*** WLCG_CS claims defined ? ' + to_string(is_defined(claims.)));


// Constants and such
CS := 'wlcg.capabilityset'; // qualifier
CS_HEAD := CS + ':/';
wlcg_cs. := []; // the WLCG capabilites set we are going to return

// There should be a single one of these per set of scopes.
  
x. :=   mask(scopes.,has_value(index_of(scopes., CS_HEAD), 0));

if[size(x.) == 0][return(wlcg_cs.);]; // no request cs, nothing to do.

if[
   1<size(x.)
   ][
        sys_err.ok := false;
        sys_err.message := 'Multiple ' + CS + ' scopes are unsupported.';
        return(wlcg_cs.);
   ];


// So we have exactly one. Don't know which element of x it is,
// so list the keys and get the only one

k. := list_keys(x.);
c := x.k.0;

say('*** WLCG_CS k=  ' + to_string(k.));

// c looks like e.g., wlcg.capabilityset:/dunepro
//remove c from the scopes
say('*** WLCG_CS scopes before remove  ' + to_string(temp_scopes.));
temp_scopes. := mask(temp_scopes., temp_scopes. != c);
say('*** WLCG_CS scopes after remove  ' + to_string(temp_scopes.));

/*
   From the spec:
   If the requester is not authorized to use the wlcg.capabilityset,
   an error MUST be returned; an access token without the requested
   capabilities will not be issued.

   Implementation: This must be in the user's LDAP record as an EPE.
*/
if[
   !is_defined(at_claims.EPE.) || !has_value(c, at_claims.EPE.)
  ][
    // blow up if the user is not allowed
    sys_err.ok := false;
    sys_err.message := 'User does not have access to this capability set. Request denied.';
    return(wlcg_cs.);
  ];

u. := to_uri(c);
parsedPath. := tokenize(u.path, '/');
lastIndex := size(parsedPath.) - 1;
lookupName := parsedPath.lastIndex + '@fnal.gov'; // required to construct the vop id
VOPAUID = 'voPersonApplicationUID';

say('*** WLCG_CS debug: requested capabilities: ' + c);
say('*** WLCG_CS debug: claims count = ' + to_string(size(claims.)));

                  cs. := new_template('ldap');
         cs.auth_type := 'simple';
           cs.address := 'ldap-test.cilogon.org';
              cs.port := 636;
        cs.claim_name := 'uid';
       cs.search_base := 'ou=services,o=Fermilab,o=CO,dc=cilogon,dc=org';
              cs.type := 'ldap';
         cs.ldap_name := 'voPersonExternalID';
cs.search_attributes. :=  [EPE, VOPAUID];
          cs.username := script_args(0);
          cs.password := script_args(1);

record. := get_claims(create_source(cs.), lookupName);

say('*** WLCG_CS debug, returned from LDAP: ' + to_string(record.));

if[!is_defined(record.EPE.)][return(wlcg_cs.);]; // no capabilites means do nothing.
if[
    is_defined(record.VOPAUID)
  ][

];
wlcg_cs. := record.EPE.;
wlcg_cs. := template_substitution(wlcg_cs., claims.);
wlcg_cs. := mask(wlcg_cs., has_value(wlcg_cs., requested_scopes.));
say('*** WLCG_CS debug, returning: ' + to_string(wlcg_cs., true));
return(wlcg_cs.);
