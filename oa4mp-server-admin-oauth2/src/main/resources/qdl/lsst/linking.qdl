/*
   This is for linking identities. It assumes that the voPersonExternalID is already in
   LDAP and will do a search there for it. If found, then it will do a second LDAP query
   for the user's NCSA-specific information.
   Author: Jeff Gaynor
   Created: 2020-10-31T12:39:30.422Z
   Last modified: 2021-02-17T12:30:30.540Z

   The client configuration:

   {"tokens": {"identity": {
    "qdl":  {
     "load": "lsst/linking.qdl",
     "xmd": {"exec_phase":   [
      "pre_auth",
      "post_token"
     ]}
    },
    "type": "identity"
   }}}

*/

// Linking for LSST (CIL-523): Do two stage lookup if the user did not use the NCSA LDAP
// to link their external account.

script_load('utils/init.qdl');

v := null;
if[claims.idp == idp.github][v:=claims.oidc+'@github.com';];
if[claims.idp == idp.google][v:=claims.oidc+'@accounts.google.com';];
if[claims.idp == idp.orcid][v:=replace(claims.oidc,'http://', 'https://');];
if[
     v != null
   ][
// go look up voPersonExternalID  first in LDAP
                    cfg. := new_template('ncsa');
                    cfg. := create_source(cfg.);
          cfg.claim_name := 'uid';
           cfg.ldap_name := 'voPersonExternalID';
         cfg.search_base := 'ou=People,dc=ncsa,dc=illinois,dc=edu';
  cfg.search_attributes. := ['uid'];
                cfg.type := 'ldap'; // Set the type to LDAP or the handler will on search by uid
say('***QDL: cfg. ==' + to_string(cfg.));
                      c. := get_claims(cfg., v);
say('***QDL: got VOP claims:' + to_string(c.));
   if[is_defined(c.uid)][claims.uid := c.uid;];
]else[
   // no recognized IDP at this point -- they used something we don't honor.
   if[
       claims.idp != idp.ncsa
     ][
        return();
     ]else[
        claims.uid := head(claims.eppn, '@');
     ];
];


say('***QDL: getting claims');
             cfg. := new_template('ncsa');
             cfg. := create_source(cfg.);
          claims. := claims. ~ get_claims(cfg., claims.uid);
say('***QDL: Returning claims:' + to_string(claims.));

